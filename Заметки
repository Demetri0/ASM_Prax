[Компиляция]
nasm -f elf hello.asm 	- Создание объектного файлы.
ld -o hello hello.o		- Преобразование объектного файла в исполняемый.

[#####]
mov eax,4
Поместить в регистр еах номер системного вызова.
Номера системных вызовов можно найти исходных текстах ядра.
В файле /usr/src/linux/include/asm-i386/unistd.h описаны константы номеров системных вызовов.
Номер 4 описан так:
#define __NR_write 4
[#####]
mov ebx,1
Записываем файловый дескриптор стандартного вывода в еbх. Всегда существует 3 стандартных дескриптора:
0 – стандартный ввод 1 – стандартный вывод 2 – вывод ошибкок.
[#####]
mov ecx,msg
Помещаем адрес сообщения в регистр есх.
[#####]
mov edx,[msg_size]
Длина сообщения передаётся в регистре edx. При описании переменной msg_size мы использовали символ $. Он означает текущее смещение в программе, из него мы вычитаем смещение переменной msg и получается длина сообщения в байтах. Длину можно указать и константой, но ошибившись в числе, можно придти к нежелательным последствиям. К примеру, замените в коде msg_size на какое нибудь число, например, 4, и заново пересоберите программу. В итоге на екране получим строку из четырёх символов: Hell. 
[#####]
int 0×80 Системный вызов операционной системы. Это аналог DOS'овскому int 21h.
[#####]
